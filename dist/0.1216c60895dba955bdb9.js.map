{"version":3,"sources":["webpack:///0.1216c60895dba955bdb9.js","webpack:///./src/routes/Config/modules/config.js","webpack:///./src/routes/Config/containers/ConfigContainer.js","webpack:///./~/babel-runtime/helpers/defineProperty.js","webpack:///./src/routes/Config/components/Config.js","webpack:///./src/site/t1687/logo/slice.js","webpack:///./src/utils/common.js","webpack:///./~/base64-js/index.js","webpack:///./~/buffer/index.js","webpack:///./~/ieee754/index.js","webpack:///./~/isarray/index.js"],"names":["webpackJsonp","374","module","exports","__webpack_require__","increment","value","arguments","length","undefined","type","COUNTER_INCREMENT","payload","counterReducer","state","initialState","action","handler","ACTION_HANDLERS","Object","defineProperty","actions","doubleAsync","COUNTER_DOUBLE_ASYNC","_ACTION_HANDLERS","_defineProperty2","_defineProperty3","obj","__esModule","default","dispatch","getState","Promise","resolve","setTimeout","counter","376","_reactRedux","_config","_Config","_Config2","mapDispatchToProps","mapStateToProps","config","connect","378","_defineProperty","key","enumerable","configurable","writable","379","_interopRequireDefault","renderSlice","imgUrl","_common2","bs64Decode","_slice2","filePathZh","_react2","createElement","src","Config","_react","_propTypes","_propTypes2","_slice","_common","_ref","style","margin","className","onClick","propTypes","number","isRequired","func","381","sliceConfig","id","title","filePathTw","filePathEn","382","Buffer","common","base64","from","toString","call","383","placeHoldersCount","b64","len","Error","byteLength","toByteArray","i","j","l","tmp","placeHolders","arr","Arr","L","revLookup","charCodeAt","tripletToBase64","num","lookup","encodeChunk","uint8","start","end","output","push","join","fromByteArray","extraBytes","parts","len2","Uint8Array","Array","code","384","global","kMaxLength","TYPED_ARRAY_SUPPORT","createBuffer","that","RangeError","__proto__","prototype","arg","encodingOrOffset","this","allocUnsafe","TypeError","ArrayBuffer","fromArrayBuffer","fromString","fromObject","assertSize","size","alloc","fill","encoding","checked","string","isEncoding","actual","write","slice","fromArrayLike","array","byteOffset","isBuffer","copy","buffer","isnan","isArray","data","SlowBuffer","isView","loweredCase","utf8ToBytes","base64ToBytes","toLowerCase","slowToString","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","b","n","m","bidirectionalIndexOf","val","dir","isNaN","arrayIndexOf","indexOf","lastIndexOf","read","buf","indexSize","readUInt16BE","arrLength","valLength","String","foundIndex","found","hexWrite","offset","Number","remaining","strLen","parsed","parseInt","substr","utf8Write","blitBuffer","asciiWrite","asciiToBytes","latin1Write","base64Write","ucs2Write","utf16leToBytes","Math","min","res","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","decodeCodePointsArray","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","apply","ret","out","toHex","bytes","checkOffset","ext","checkInt","max","objectWriteUInt16","littleEndian","objectWriteUInt32","checkIEEE754","writeFloat","noAssert","ieee754","writeDouble","base64clean","str","stringtrim","replace","INVALID_BASE64_RE","trim","units","Infinity","leadSurrogate","byteArray","c","hi","lo","dst","INSPECT_MAX_BYTES","foo","subarray","e","poolSize","_augment","Symbol","species","allocUnsafeSlow","_isBuffer","compare","a","x","y","concat","list","pos","swap16","swap32","swap64","equals","inspect","match","target","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","toJSON","_arr","newBuf","sliceLen","readUIntLE","mul","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","pow","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","floor","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","set","385","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","d","s","NaN","rt","abs","log","LN2","386"],"mappings":"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","file":"0.1216c60895dba955bdb9.js","sourcesContent":["webpackJsonp([0],{\n\n/***/ 374:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.actions = exports.doubleAsync = exports.COUNTER_DOUBLE_ASYNC = exports.COUNTER_INCREMENT = undefined;\n\nvar _defineProperty2 = __webpack_require__(378);\n\nvar _defineProperty3 = _interopRequireDefault(_defineProperty2);\n\nvar _ACTION_HANDLERS;\n\nexports.increment = increment;\nexports.default = counterReducer;\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// ------------------------------------\n// Constants\n// ------------------------------------\nvar COUNTER_INCREMENT = exports.COUNTER_INCREMENT = 'COUNTER_INCREMENT';\nvar COUNTER_DOUBLE_ASYNC = exports.COUNTER_DOUBLE_ASYNC = 'COUNTER_DOUBLE_ASYNC';\n\n// ------------------------------------\n// Actions\n// ------------------------------------\nfunction increment() {\n  var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n\n  return {\n    type: COUNTER_INCREMENT,\n    payload: value\n  };\n}\n\n/*  This is a thunk, meaning it is a function that immediately\n    returns a function for lazy evaluation. It is incredibly useful for\n    creating async actions, especially when combined with redux-thunk! */\n\nvar doubleAsync = exports.doubleAsync = function doubleAsync() {\n  return function (dispatch, getState) {\n    return new Promise(function (resolve) {\n      setTimeout(function () {\n        dispatch({\n          type: COUNTER_DOUBLE_ASYNC,\n          payload: getState().counter\n        });\n        resolve();\n      }, 200);\n    });\n  };\n};\n\nvar actions = exports.actions = {\n  increment: increment,\n  doubleAsync: doubleAsync\n};\n\n// ------------------------------------\n// Action Handlers\n// ------------------------------------\nvar ACTION_HANDLERS = (_ACTION_HANDLERS = {}, (0, _defineProperty3.default)(_ACTION_HANDLERS, COUNTER_INCREMENT, function (state, action) {\n  return state + action.payload;\n}), (0, _defineProperty3.default)(_ACTION_HANDLERS, COUNTER_DOUBLE_ASYNC, function (state, action) {\n  return state * 2;\n}), _ACTION_HANDLERS);\n\n// ------------------------------------\n// Reducer\n// ------------------------------------\nvar initialState = 0;\nfunction counterReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments[1];\n\n  var handler = ACTION_HANDLERS[action.type];\n\n  return handler ? handler(state, action) : state;\n}\n\n/***/ }),\n\n/***/ 376:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _reactRedux = __webpack_require__(58);\n\nvar _config = __webpack_require__(374);\n\nvar _Config = __webpack_require__(379);\n\nvar _Config2 = _interopRequireDefault(_Config);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*  Object of action creators (can also be function that returns object).\n    Keys will be passed as props to presentational components. Here we are\n    implementing our wrapper around increment; the component doesn't care   */\n\nvar mapDispatchToProps = {\n    increment: function increment() {\n        return (0, _config.increment)(1);\n    },\n    doubleAsync: _config.doubleAsync\n};\n\n/*  This is a container component. Notice it does not contain any JSX,\n    nor does it import React. This component is **only** responsible for\n    wiring in the actions and state necessary to render a presentational\n    component - in this case, the counter:   */\n\nvar mapStateToProps = function mapStateToProps(state) {\n    return {\n        config: state.config\n    };\n};\n\n/*  Note: mapStateToProps is where you should use `reselect` to create selectors, ie:\n\n    import { createSelector } from 'reselect'\n    const counter = (state) => state.counter\n    const tripleCount = createSelector(counter, (count) => count * 3)\n    const mapStateToProps = (state) => ({\n      counter: tripleCount(state)\n    })\n\n    Selectors can compute derived data, allowing Redux to store the minimal possible state.\n    Selectors are efficient. A selector is not recomputed unless one of its arguments change.\n    Selectors are composable. They can be used as input to other selectors.\n    https://github.com/reactjs/reselect    */\n\nexports.default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_Config2.default);\n\n/***/ }),\n\n/***/ 378:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\n\nvar _defineProperty = __webpack_require__(170);\n\nvar _defineProperty2 = _interopRequireDefault(_defineProperty);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function (obj, key, value) {\n  if (key in obj) {\n    (0, _defineProperty2.default)(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n};\n\n/***/ }),\n\n/***/ 379:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Config = undefined;\n\nvar _react = __webpack_require__(5);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = __webpack_require__(7);\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _slice = __webpack_require__(381);\n\nvar _slice2 = _interopRequireDefault(_slice);\n\nvar _common = __webpack_require__(382);\n\nvar _common2 = _interopRequireDefault(_common);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// slice config\nfunction renderSlice() {\n  // for (let i = 0; i < sliceConfig.length; i++) {\n  //   const obj = sliceConfig[i]\n  //   for (let key in obj) {\n  //     let attrName = key\n  //     let attrValue = obj[key]\n  //   }\n  // }\n  var imgUrl = _common2.default.bs64Decode(_slice2.default[0].filePathZh);\n  return _react2.default.createElement(\n    'div',\n    null,\n    imgUrl,\n    _react2.default.createElement('img', { src: imgUrl })\n  );\n}\n// util function\nvar Config = exports.Config = function Config(_ref) {\n  var config = _ref.config,\n      increment = _ref.increment,\n      doubleAsync = _ref.doubleAsync;\n  return _react2.default.createElement(\n    'div',\n    { style: { margin: '0 auto' } },\n    _react2.default.createElement(\n      'h2',\n      null,\n      'config: ',\n      config\n    ),\n    _react2.default.createElement(\n      'button',\n      { className: 'btn btn-primary', onClick: increment },\n      'Increment'\n    ),\n    ' ',\n    _react2.default.createElement(\n      'button',\n      { className: 'btn btn-secondary', onClick: doubleAsync },\n      'Double (Async)'\n    ),\n    renderSlice()\n  );\n};\nConfig.propTypes = {\n  config: _propTypes2.default.number.isRequired,\n  increment: _propTypes2.default.func.isRequired,\n  doubleAsync: _propTypes2.default.func.isRequired\n};\n\nexports.default = Config;\n\n/***/ }),\n\n/***/ 381:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar sliceConfig = [{\n  'id': '#FlashID1',\n  'title': '0',\n  'filePathZh': 'aW1hZ2VzL2Jhbm5lci8wLmpwZw==',\n  'filePathTw': 'aW1hZ2VzL2Jhbm5lci8wLmpwZw==',\n  'filePathEn': 'aW1hZ2VzL2Jhbm5lci8wLmpwZw==' }, {\n  'id': '#FlashID2',\n  'title': '0',\n  'filePathZh': 'aW1hZ2VzL2Jhbm5lci8wLmpwZw==',\n  'filePathTw': 'aW1hZ2VzL2Jhbm5lci8wLmpwZw==',\n  'filePathEn': 'aW1hZ2VzL2Jhbm5lci8wLmpwZw=='\n}];\n\nexports.default = sliceConfig;\n\n/***/ }),\n\n/***/ 382:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Buffer) {\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar common = {\n  bs64Decode: function bs64Decode(base64) {\n    return Buffer.from(base64, 'base64').toString();\n  }\n};\nexports.default = common;\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(384).Buffer))\n\n/***/ }),\n\n/***/ 383:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction placeHoldersCount (b64) {\n  var len = b64.length\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // the number of equal signs (place holders)\n  // if there are two placeholders, than the two characters before it\n  // represent one byte\n  // if there is only one, then the three characters before it represent 2 bytes\n  // this is just a cheap hack to not do indexOf twice\n  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0\n}\n\nfunction byteLength (b64) {\n  // base64 is 4/3 + up to two characters of the original data\n  return b64.length * 3 / 4 - placeHoldersCount(b64)\n}\n\nfunction toByteArray (b64) {\n  var i, j, l, tmp, placeHolders, arr\n  var len = b64.length\n  placeHolders = placeHoldersCount(b64)\n\n  arr = new Arr(len * 3 / 4 - placeHolders)\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  l = placeHolders > 0 ? len - 4 : len\n\n  var L = 0\n\n  for (i = 0, j = 0; i < l; i += 4, j += 3) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]\n    arr[L++] = (tmp >> 16) & 0xFF\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  if (placeHolders === 2) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[L++] = tmp & 0xFF\n  } else if (placeHolders === 1) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var output = ''\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    output += lookup[tmp >> 2]\n    output += lookup[(tmp << 4) & 0x3F]\n    output += '=='\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])\n    output += lookup[tmp >> 10]\n    output += lookup[(tmp >> 4) & 0x3F]\n    output += lookup[(tmp << 2) & 0x3F]\n    output += '='\n  }\n\n  parts.push(output)\n\n  return parts.join('')\n}\n\n\n/***/ }),\n\n/***/ 384:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n\n\nvar base64 = __webpack_require__(383)\nvar ieee754 = __webpack_require__(385)\nvar isArray = __webpack_require__(386)\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(59)))\n\n/***/ }),\n\n/***/ 385:\n/***/ (function(module, exports) {\n\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n/***/ }),\n\n/***/ 386:\n/***/ (function(module, exports) {\n\nvar toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// 0.1216c60895dba955bdb9.js","// ------------------------------------\n// Constants\n// ------------------------------------\nexport const COUNTER_INCREMENT = 'COUNTER_INCREMENT'\nexport const COUNTER_DOUBLE_ASYNC = 'COUNTER_DOUBLE_ASYNC'\n\n// ------------------------------------\n// Actions\n// ------------------------------------\nexport function increment (value = 1) {\n  return {\n    type    : COUNTER_INCREMENT,\n    payload : value\n  }\n}\n\n/*  This is a thunk, meaning it is a function that immediately\n    returns a function for lazy evaluation. It is incredibly useful for\n    creating async actions, especially when combined with redux-thunk! */\n\nexport const doubleAsync = () => {\n  return (dispatch, getState) => {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        dispatch({\n          type    : COUNTER_DOUBLE_ASYNC,\n          payload : getState().counter\n        })\n        resolve()\n      }, 200)\n    })\n  }\n}\n\nexport const actions = {\n  increment,\n  doubleAsync\n}\n\n// ------------------------------------\n// Action Handlers\n// ------------------------------------\nconst ACTION_HANDLERS = {\n  [COUNTER_INCREMENT]    : (state, action) => state + action.payload,\n  [COUNTER_DOUBLE_ASYNC] : (state, action) => state * 2\n}\n\n// ------------------------------------\n// Reducer\n// ------------------------------------\nconst initialState = 0\nexport default function counterReducer (state = initialState, action) {\n  const handler = ACTION_HANDLERS[action.type]\n\n  return handler ? handler(state, action) : state\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/routes/Config/modules/config.js","import { connect } from 'react-redux'\nimport { increment, doubleAsync } from '../modules/config'\n\n/*  This is a container component. Notice it does not contain any JSX,\n    nor does it import React. This component is **only** responsible for\n    wiring in the actions and state necessary to render a presentational\n    component - in this case, the counter:   */\n\nimport Config from '../components/Config'\n\n/*  Object of action creators (can also be function that returns object).\n    Keys will be passed as props to presentational components. Here we are\n    implementing our wrapper around increment; the component doesn't care   */\n\nconst mapDispatchToProps = {\n  increment : () => increment(1),\n  doubleAsync\n}\n\nconst mapStateToProps = (state) => ({\n  config : state.config\n})\n\n/*  Note: mapStateToProps is where you should use `reselect` to create selectors, ie:\n\n    import { createSelector } from 'reselect'\n    const counter = (state) => state.counter\n    const tripleCount = createSelector(counter, (count) => count * 3)\n    const mapStateToProps = (state) => ({\n      counter: tripleCount(state)\n    })\n\n    Selectors can compute derived data, allowing Redux to store the minimal possible state.\n    Selectors are efficient. A selector is not recomputed unless one of its arguments change.\n    Selectors are composable. They can be used as input to other selectors.\n    https://github.com/reactjs/reselect    */\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Config)\n\n\n\n// WEBPACK FOOTER //\n// ./src/routes/Config/containers/ConfigContainer.js","\"use strict\";\n\nexports.__esModule = true;\n\nvar _defineProperty = require(\"../core-js/object/define-property\");\n\nvar _defineProperty2 = _interopRequireDefault(_defineProperty);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function (obj, key, value) {\n  if (key in obj) {\n    (0, _defineProperty2.default)(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/babel-runtime/helpers/defineProperty.js\n// module id = 378\n// module chunks = 0 1","import React from 'react'\nimport PropTypes from 'prop-types'\n\n// slice config\nimport sliceConfig from '../../../site/t1687/logo/slice'\n// util function\nimport common from '../../../utils/common'\n\nfunction renderSlice () {\n  // for (let i = 0; i < sliceConfig.length; i++) {\n  //   const obj = sliceConfig[i]\n  //   for (let key in obj) {\n  //     let attrName = key\n  //     let attrValue = obj[key]\n  //   }\n  // }\n  const imgUrl = common.bs64Decode(sliceConfig[0].filePathZh)\n  return (\n    <div>\n      {imgUrl}\n      <img src={imgUrl} />\n    </div>\n  )\n}\n\nexport const Config = ({ config, increment, doubleAsync }) => (\n  <div style={{ margin: '0 auto' }} >\n    <h2>config: {config}</h2>\n    <button className='btn btn-primary' onClick={increment}>\n      Increment\n    </button>\n    {' '}\n    <button className='btn btn-secondary' onClick={doubleAsync}>\n      Double (Async)\n    </button>\n    {renderSlice()}\n  </div>\n)\nConfig.propTypes = {\n  config: PropTypes.number.isRequired,\n  increment: PropTypes.func.isRequired,\n  doubleAsync: PropTypes.func.isRequired,\n}\n\nexport default Config\n\n\n\n// WEBPACK FOOTER //\n// ./src/routes/Config/components/Config.js","const sliceConfig = [{\n  'id': '#FlashID1',\n  'title': '0',\n  'filePathZh': 'aW1hZ2VzL2Jhbm5lci8wLmpwZw==',\n  'filePathTw': 'aW1hZ2VzL2Jhbm5lci8wLmpwZw==',\n  'filePathEn': 'aW1hZ2VzL2Jhbm5lci8wLmpwZw==' },\n{\n  'id': '#FlashID2',\n  'title': '0',\n  'filePathZh': 'aW1hZ2VzL2Jhbm5lci8wLmpwZw==',\n  'filePathTw': 'aW1hZ2VzL2Jhbm5lci8wLmpwZw==',\n  'filePathEn': 'aW1hZ2VzL2Jhbm5lci8wLmpwZw=='\n}]\n\nexport default sliceConfig\n\n\n\n// WEBPACK FOOTER //\n// ./src/site/t1687/logo/slice.js","const common = {\n  bs64Decode: function (base64) {\n    return Buffer.from(base64, 'base64').toString()\n  }\n}\nexport default common\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils/common.js","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction placeHoldersCount (b64) {\n  var len = b64.length\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // the number of equal signs (place holders)\n  // if there are two placeholders, than the two characters before it\n  // represent one byte\n  // if there is only one, then the three characters before it represent 2 bytes\n  // this is just a cheap hack to not do indexOf twice\n  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0\n}\n\nfunction byteLength (b64) {\n  // base64 is 4/3 + up to two characters of the original data\n  return b64.length * 3 / 4 - placeHoldersCount(b64)\n}\n\nfunction toByteArray (b64) {\n  var i, j, l, tmp, placeHolders, arr\n  var len = b64.length\n  placeHolders = placeHoldersCount(b64)\n\n  arr = new Arr(len * 3 / 4 - placeHolders)\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  l = placeHolders > 0 ? len - 4 : len\n\n  var L = 0\n\n  for (i = 0, j = 0; i < l; i += 4, j += 3) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]\n    arr[L++] = (tmp >> 16) & 0xFF\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  if (placeHolders === 2) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[L++] = tmp & 0xFF\n  } else if (placeHolders === 1) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var output = ''\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    output += lookup[tmp >> 2]\n    output += lookup[(tmp << 4) & 0x3F]\n    output += '=='\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])\n    output += lookup[tmp >> 10]\n    output += lookup[(tmp >> 4) & 0x3F]\n    output += lookup[(tmp << 2) & 0x3F]\n    output += '='\n  }\n\n  parts.push(output)\n\n  return parts.join('')\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/base64-js/index.js\n// module id = 383\n// module chunks = 0","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/buffer/index.js\n// module id = 384\n// module chunks = 0","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ieee754/index.js\n// module id = 385\n// module chunks = 0","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/isarray/index.js\n// module id = 386\n// module chunks = 0"],"sourceRoot":""}